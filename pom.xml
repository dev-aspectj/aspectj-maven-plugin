<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>mojo-parent</artifactId>
    <version>77</version>
  </parent>

  <groupId>dev.aspectj</groupId>
  <artifactId>aspectj-maven-plugin</artifactId>
  <version>1.14-SNAPSHOT</version>
  <packaging>maven-plugin</packaging>

  <organization>
    <name>AspectJ.dev</name>
    <url>https://github.com/dev-aspectj</url>
  </organization>

  <name>AspectJ Maven Plugin</name>
  <description>
    Handles AspectJ usage within Maven.
    Functionality provided is: weaving of aspects (or existing aspects from libraries) with the
    test and/or main classes, weaving of pre-existing jars and ajdoc reporting.
  </description>
  <inceptionYear>2018</inceptionYear>

  <properties>
    <!-- When upgrading to 1.9.21+, the plugin no longer runs on JDK 11, because AJC does not because ECJ does not -->
    <aspectjVersion>1.9.20.1</aspectjVersion>

    <!-- Minimum Maven version required to build this plugin -->
    <mavenBuildVersion>3.1.1</mavenBuildVersion>
    <!-- Maven API version used by this plugin (seems to be backward compatible to Maven 3.1.x, maybe even 3.0.x) -->
    <mavenAPIVersion>3.9.4</mavenAPIVersion>
    <!-- Minimum Maven version required to run this plugin (not enforced at the moment, see 'prerequisites' section) -->
    <mavenRuntimeVersion>3.0.5</mavenRuntimeVersion>

    <!-- Reproducible builds, https://maven.apache.org/guides/mini/guide-reproducible-builds.html -->
    <project.build.outputTimestamp>1</project.build.outputTimestamp>

    <junitVersion>4.13.2</junitVersion>
    <doxiaVersion>2.0.0-M8</doxiaVersion>
    <doxiaSitetoolsVersion>2.0.0-M16</doxiaSitetoolsVersion>
    <!-- Override mojo-parent:77 - requires Java 11+ -->
    <checkstyle.version>10.12.2</checkstyle.version>
    <mojo.java.target>8</mojo.java.target> <!-- aspectJ > 1.8.13 is JDK 8 minimum -->
    <!-- work around until it is correctly fixed at top parent -->
    <scmpublish.content>${project.build.directory}/staging/aspectj-maven-plugin</scmpublish.content>
  </properties>

  <prerequisites>
    <!--
      Minimum Maven version required to both build and use plugin. See Maven Enforcer configuration where the build
      version is further restricted. Actually, despite using API version 3.8.1, a quick test shows that this plugin
      still works fine on Maven 3.0.5, as long as the plugins from the Maven root POM for that old version are
        - locally available or
        - can be downloaded via HTTP instead of HTTPS (e.g. via Nexus, Maven Central deactivated HTTP) or
        - have been updated in the user's POM to versions locally available or downloadable via HTTP (not HTTPS).
      Maybe it would work on still older Maven versions, but I (Alexander Kriegisch) did not test.
    -->
    <maven>${mavenRuntimeVersion}</maven>
  </prerequisites>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/dev-aspectj/aspectj-maven-plugin/issues/</url>
  </issueManagement>
  <ciManagement>
    <system>GitHub</system>
    <url>https://github.com/dev-aspectj/aspectj-maven-plugin/actions</url>
  </ciManagement>

  <scm>
    <connection>scm:git:https://github.com/dev-aspectj/aspectj-maven-plugin.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/dev-aspectj/aspectj-maven-plugin.git</developerConnection>
    <url>https://github.com/dev-aspectj/aspectj-maven-plugin</url>
  </scm>

  <distributionManagement>
      <snapshotRepository>
          <id>ossrh</id>
          <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
      </snapshotRepository>
      <repository>
          <id>ossrh</id>
          <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2</url>
      </repository>
  </distributionManagement>

  <developers>
    <developer>
      <id>kriegaex</id>
      <name>Alexander Kriegisch</name>
      <email>kriegaex@aspectj.dev</email>
      <organization>Scrum-Master.de - Agile Project Management</organization>
      <organizationUrl>https://scrum-master.de</organizationUrl>
      <roles>
        <role>Maintainer</role>
        <role>Java Developer</role>
      </roles>
    </developer>
    <developer>
      <id>kaare</id>
      <name>Kaare Nilsen</name>
      <email>kaare.nilsen@gmail.com</email>
      <organization>Arktekk</organization>
      <organizationUrl>http://arktekk.no</organizationUrl>
      <roles>
        <role>Java Developer</role>
      </roles>
      <timezone>+1</timezone>
    </developer>
    <developer>
      <name>Lennart JÃ¶relid</name>
      <email>lj@jguru.se</email>
      <organization>jGuru Europe AB</organization>
      <roles>
        <role>Java Developer</role>
      </roles>
      <timezone>+1</timezone>
    </developer>
    <developer>
      <id>kriegaex</id>
      <name>Alexander Kriegisch</name>
      <email>kriegaex@aspectj.dev</email>
    </developer>
  </developers>

  <contributors>
    <contributor>
      <name>Thor Age Eldby</name>
      <email>tel@objectnet.no</email>
      <roles>
        <role>Java Developer</role>
      </roles>
      <timezone>+1</timezone>
    </contributor>
    <contributor>
      <name>David J. M. Karlsen</name>
      <email>david@davidkarlsen.com</email>
      <organization>davidkarlsen.com</organization>
      <organizationUrl>http://www.davidkarlsen.com</organizationUrl>
      <roles>
        <role>Java Developer</role>
      </roles>
      <timezone>+1</timezone>
    </contributor>
    <contributor>
      <name>Marvin Froeder</name>
      <email>velo.br@gmail.com</email>
      <timezone>-3</timezone>
    </contributor>
    <contributor>
      <name>Krzysztof Debski</name>
      <email>kdebski85@gmail.com</email>
      <timezone>+1</timezone>
    </contributor>
    <contributor>
      <name>Nicholas Wong</name>
      <email>nickwongdev@gmail.com</email>
      <timezone>America/LosAngeles</timezone>
    </contributor>
  </contributors>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junitVersion}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
        <!-- Maven core -->
        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-utils</artifactId>
            <version>4.0.0</version>
        </dependency>
        <!--
            Do not remove, even though reported as unused by dependency:analyze.
            Do not use scope 'provided', either.
            Otherwise, there will be a runtime error like: "No implementation for SiteTool was bound."
        -->
        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-xml</artifactId>
            <version>4.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
            <version>${mavenAPIVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-model</artifactId>
            <version>${mavenAPIVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.reporting</groupId>
            <artifactId>maven-reporting-api</artifactId>
            <version>4.0.0-M9</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.reporting</groupId>
            <artifactId>maven-reporting-impl</artifactId>
            <version>4.0.0-M13</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>${mavenAPIVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-artifact</artifactId>
            <version>${mavenAPIVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugin-tools</groupId>
            <artifactId>maven-plugin-annotations</artifactId>
            <version>${maven-plugin-plugin.version}</version>
            <scope>provided</scope><!-- annotations are needed only to build the plugin -->
        </dependency>
        <!-- Other -->
        <!-- see: https://cwiki.apache.org/confluence/display/MAVEN/Plugin+migration+to+Maven3+dependencies -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-compat</artifactId>
            <version>${mavenAPIVersion}</version>
            <scope>test</scope>
        </dependency>

        <!-- Needed by goal 'aspectj-report' -->
        <dependency>
            <groupId>org.apache.maven.doxia</groupId>
            <artifactId>doxia-sink-api</artifactId>
            <version>${doxiaVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.doxia</groupId>
            <artifactId>doxia-site-renderer</artifactId>
            <version>${doxiaSitetoolsVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.doxia</groupId>
            <artifactId>doxia-integration-tools</artifactId>
            <version>${doxiaSitetoolsVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.doxia</groupId>
            <artifactId>doxia-site-model</artifactId>
            <version>${doxiaSitetoolsVersion}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectjVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.4</version>
        </dependency>
        <!--
            This is required to make the ajdoc tool work properly.
            When generating the AspectJ site documentation, the following debug statement is emitted onto the log:

            [DEBUG] Running : ajdoc  -classpath [... a long classpath follows ...]
            ajdoc requires a JDK 1.4 or later tools jar - exiting
        -->
        <!-- Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
          Get rid of transitive plexus-container-default dependency in maven-plugin-testing-harness:3.3.0, because
          it causes warnings about that deprecated component when running AJ Maven Plugin
        -->
        <dependency>
            <groupId>org.apache.maven.plugin-testing</groupId>
            <artifactId>maven-plugin-testing-harness</artifactId>
            <version>4.0.0-alpha-1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

  <build>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <configuration>
            <!-- Amend mojo-parent default config, avoiding errors concerning modules vs. unnamed module packages -->
            <source>8</source>
            <!-- Reproducible builds, https://maven.apache.org/guides/mini/guide-reproducible-builds.html -->
            <notimestamp>true</notimestamp>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.12.1</version>
          <dependencies>
            <dependency>
              <groupId>org.asciidoctor</groupId>
              <artifactId>asciidoctor-maven-plugin</artifactId>
              <version>2.2.5</version>
            </dependency>
            <dependency>
              <groupId>org.asciidoctor</groupId>
              <artifactId>asciidoctorj-diagram</artifactId>
              <version>2.2.14</version>
            </dependency>
            <dependency>
              <groupId>org.asciidoctor</groupId>
              <artifactId>asciidoctorj-diagram-plantuml</artifactId>
              <version>1.2023.12</version>
            </dependency>
          </dependencies>
          <configuration>
            <generateReports>true</generateReports>
            <generateSitemap>true</generateSitemap>
            <relativizeDecorationLinks>false</relativizeDecorationLinks>
            <locales>en</locales>
            <inputEncoding>UTF-8</inputEncoding>
            <outputEncoding>UTF-8</outputEncoding>
            <asciidoc>
              <!-- Optional site-wide AsciiDoc attributes -->
              <attributes>
                <imagesoutdir>${project.build.directory}/site/images</imagesoutdir>
                <icons>font</icons>
                <!-- Add required rouge styles in '/css/site.css' -->
                <source-highlighter>rouge</source-highlighter>
                <toclevels>2</toclevels>
              </attributes>
              <requires>
                <require>asciidoctor-diagram</require>
              </requires>
            </asciidoc>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-bytecode-version</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <enforceBytecodeVersion>
                  <maxJdkVersion>${mojo.java.target}</maxJdkVersion>
                  <excludes>
                    <exclude>com.sun:tools</exclude>
                    <!--
                      AspectJ 1.9.8.M1 was the last one to use older Eclipse Core dependencies limited to Java 8 byte
                      code. As of 1.9.8.RC1 with full Java 17 support, ECJ and JDT Core depend on libraries containing
                      Java 11 class files, though. Since 1.9.21.M1, there are Java 17 class files in JDT Core.
                    -->
                    <exclude>org.aspectj:aspectjtools</exclude>
                  </excludes>
                </enforceBytecodeVersion>
                <requireMavenVersion>
                  <version>${mavenBuildVersion}</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>1.5.1</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>false</skip>
          <excludes>
            <exclude>**/test-project/**/*.java</exclude>
            <exclude>**/parent-child-test-project/**/*.java</exclude>
            <exclude>**/AbstractAjcMojoTest.java</exclude>
          </excludes>
        </configuration>
      </plugin>
    </plugins>

  </build>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>l10n-maven-plugin</artifactId>
        <version>${l10n-maven-plugin.version}</version>
        <configuration>
          <locales>
            <locale>nl</locale>
            <locale>sv</locale>
          </locales>
        </configuration>
      </plugin>
    </plugins>
  </reporting>

  <profiles>
    <!--
      AspectJ compilation requires that tools.jar (or its equivalent for some JDKs) is found on the classpath.
      The profiles named [something]toolsJar-profile define the systemPath for the tools.jar dependency
      by overriding the dummy systemPath from the dependencyManagement section.

      CAVEAT: Setting the systemPath it via a profile-dependent property like in earlier plugin versions
      does *not* work when the compiled plugin is used from Eclipse because properties are incorrectly merged
      by Eclipse, leading to problems ever since the 'java8' profile was introduced here because it also
      defines a property.
    -->

      <profile>
          <id>tools-jar</id>
          <activation>
              <jdk>1.8</jdk> <!-- activate only on JDK8, as 8 is minimum version to run aspectj on-->
          </activation>
          <dependencies>
              <dependency>
                  <groupId>com.sun</groupId>
                  <artifactId>tools</artifactId>
                  <version>1.8</version>
                  <scope>system</scope>
                  <systemPath>${java.home}/../lib/tools.jar</systemPath>
              </dependency>
          </dependencies>
      </profile>
      <profile>
          <id>java8</id>
          <activation>
              <jdk>[1.8,)</jdk>
          </activation>
          <properties>
              <!--
                Because of this properties section the old way of setting the tools.jar path via a property defined in
                another profile does not work anymore when importing Maven projects into Eclipse. :-(
              -->
              <additionalparam>-Xdoclint:none</additionalparam>
          </properties>
      </profile>
    <profile>
      <id>maven-repo-local</id>
      <activation>
        <property>
          <name>maven.repo.local</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemProperties>
                <property>
                 <!--
                    Pass this through to the tests (if set!) to
                    have them pick the right repository
                  -->
                  <name>maven.repo.local</name>
                  <value>${maven.repo.local}</value>
                </property>
              </systemProperties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>integration-test</id>
      <activation>
        <!--
          CAVEAT: 'activeByDefault=true' does not work reliably and immediately deactivates the profile, as soon as
          other profiles are activated explicitly or via activation conditions, either in this POM or in the Mojohaus
          parent. See https://stackoverflow.com/a/5309576/1082681, https://issues.apache.org/jira/browse/MNG-4917.

          Therefore, we activate it based on a file which always exists. Thanks, Maven! :-/
          Note: ${project.basedir} is not supported during profile activation, use ${basedir} instead.
        -->
        <file>
          <exists>${basedir}/pom.xml</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-invoker-plugin</artifactId>
            <version>3.6.0</version>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>install</goal>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <projectsDirectory>src/it</projectsDirectory>
              <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
              <postBuildHookScript>verify</postBuildHookScript>
              <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
              <goals>
                <goal>clean</goal>
                <goal>test</goal>
              </goals>
              <settingsFile>src/it/settings.xml</settingsFile>
              <!-- Do not deactivate! At least 14 integration tests assert on debug output. -->
              <debug>true</debug>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- GPG Signature on release -->
    <profile>
      <id>release-sign-artifacts</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <!--
              Other than Maven Deploy, this plugin cannot just be added to the 'build/plugins' section of the parent POM
              once and (de-)activated with a simple property like 'maven.deploy.skip' on a per-module basis. See also
              https://issues.sonatype.org/browse/OSSRH-68966. Consequently, we do not add it to the parent but separately
              to each module meant to be published.
            -->
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>1.6.8</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
              <!-- Activate in order to directly release to Maven Central after successful staging -->
              <autoReleaseAfterClose>false</autoReleaseAfterClose>
            </configuration>
            <dependencies>
              <!--
                Plugin version 1.6.8 does not work on JDK 16+ without special MAVEN_OPTS opening certain modules,
                because the XStream version used needs it. One workaround is to use a more recent XStream version.
                Attention: Do *not* upgrade to e.g. 1.4.18, because it causes exceptions during deployment.
                TODO: remove plugin dependency after OSSRH-66257, NEXUS-26993 are fixed.
              -->
              <dependency>
                <groupId>com.thoughtworks.xstream</groupId>
                <artifactId>xstream</artifactId>
                <version>1.4.15</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
